{"pages":[],"posts":[{"title":"CNN经典网络Lenet5","text":"前言在跟着老师学习写第一个CNN（卷积神经网络）的时候，很多地方感到困惑，对此，我决定把卷积神经网络中的经典案例进行简单的分析，这个是1998年LeCun所提出的LeNet 5，是卷积神经网络的鼻祖，也是卷积神经网络的“Hello，world”。 网络分析 Lenet 5 一共有2个卷积层，2个池化层，3个全连接层。 LeNet-5第一层：卷积层C1C1层是卷积层，形成6个特征图谱。卷积的输入区域大小是5x5，每个特征图谱内参数共享，即每个特征图谱内只使用一个共同卷积核，卷积核有5x5个连接参数加上1个偏置共26个参数。卷积区域每次滑动一个像素，这样卷积层形成的每个特征图谱大小是(32-5)/1+1=28x28。C1层共有26x6=156个训练参数，有(5x5+1)x28x28x6=122304个连接。C1层的连接结构如下所示。 LeNet-5第二层：池化层S2S2层是一个下采样层（为什么是下采样？利用图像局部相关性的原理，对图像进行子抽样，可以减少数据处理量同时保留有用信息）。C1层的6个28x28的特征图谱分别进行以2x2为单位的下抽样得到6个14x14（（28-2）/2+1）的图。每个特征图谱使用一个下抽样核。5x14x14x6=5880个连接。S2层的网络连接结构如下图 LeNet-5第三层：卷积层C3C3层是一个卷积层，卷积和和C1相同，不同的是C3的每个节点与S2中的多个图相连。C3层有16个10x10（14-5+1）的图，每个图与S2层的连接的方式如下表 所示。C3与S2中前3个图相连的卷积结构见下图.这种不对称的组合连接的方式有利于提取多种组合特征。该层有(5x5x3+1)x6 + (5x5x4 + 1) x 3 + (5x5x4 +1)x6 + (5x5x6+1)x1 = 1516个训练参数，共有1516x10x10=151600个连接。 LeNet-5第四层：池化层S4S4是一个下采样层。C3层的16个10x10的图分别进行以2x2为单位的下抽样得到16个5x5的图。5x5x5x16=2000个连接。连接的方式与S2层类似，如下所示。 LeNet-5第五层：全连接层C5C5层是一个全连接层。由于S4层的16个图的大小为5x5，与卷积核的大小相同，所以卷积后形成的图的大小为1x1。这里形成120个卷积结果。每个都与上一层的16个图相连。所以共有(5x5x16+1)x120 = 48120个参数，同样有48120个连接。C5层的网络结构如下所示。 LeNet-5第六层：全连接层F6F6层是全连接层。F6层有84个节点，对应于一个7x12的比特图，该层的训练参数和连接数都是(120 + 1)x84=10164. LeNet-5第七层：全连接层Output略 参考文献1.https://blog.csdn.net/happyorg/article/details/78274066","link":"/2020/02/14/CNN%E7%BB%8F%E5%85%B8%E7%BD%91%E7%BB%9CLenet5/"},{"title":"ch2-1 运放基础","text":"toc：true集成运算放大器符号： 三角表示，上下端口–电源 同相输入端：输入输出信号相位相同 反相输入端：反之，相位相反 输出信号和两个输入信号之差成正比： 模型： 受控源模型 上式中的Auo–运放开环放大倍数（开环增益） 运放差模输入电压：输入端电压之差理想受控源模型 虚断路：输入电阻无限接近于0，输入部分电流也就趋近于0，所以说输入部分“虚断路” 理想运放条件：输入电阻趋近无穷大（保证全部分压给运放），输入偏流趋近0，输出电阻趋近0，开环增益趋近无穷大，上限频率趋近无穷大……传输特性集成运放电压传输特性 由于电源电压有限，所以输出电压随输入电压会有限制，输出电压和输入电压变化关系分成线性区（输入输出电压成线性关系）和限幅区。理想集成运放电压传输特性 因为Auo–&gt;无穷大，所以线性放大区———&gt;0，则同相端电压和反相端电压相等，输出电阻为0（没有电阻，只有导线，自然可视为“虚短路”），开环运放是无法作为线性放大器（开环指的是输出只受输入控制，没有反馈系统） 差模输入电压这里应该也是可以不为0，只是因为限幅，这个和趋近于0，所产生的输出电压几乎没有区别。 反相电压传输特性只是Auo &lt; 0 。传输特性图像水平翻转。 2020.2.18","link":"/2020/02/18/ch2-1%20%E8%BF%90%E6%94%BE%E5%9F%BA%E7%A1%80/"},{"title":"ch1-2 放大器主要指标","text":"toc:true什么是放大器？ 概念：功率放大倍数 大于 1 （变压器不是放大器） 同向放大器：输入输出信号相位相同 反向放大器：输入输出信号相位相反 放大器有两正负两极，作用同上，称为同向输入端和反向输入端 放大器性能指标 可等效为一个有源二端口网络（一个输入端–接信号源，一个输出端–接负载） 放大器结构是两个电阻（一个输入电阻一个输出电阻），再加上一个受控源（放大倍数） 放大器参数就是上面的放大倍数A，加上输入输出电阻阻值，以及频率响应与带宽（？？？），总谐波失真系数（非线性失真系数）THD（？？？） 放大倍数A：（也称增益）输入量和输出量的比值，电压，电流增益（无量纲 ），互阻，互导增益 输入电阻：Ri决定了放大器从电压源处分到的电压值。 输出电阻：对负载而言，放大器相当于信号源，R0是信号源内阻，则其阻值表达了其的带载能力。 频率特性:放大器中存在电容（放大器前面是输入输出电阻加上受控源，现在又有电容，所以到底放大器内部是什么结构？？）频率大，容抗小，反之，频率小，容抗就大，那么容抗会对增益有影响（怎么影响是没有说的） 放大器的截止频率和通频带：频率分低频区，中频区，高频区。频率过高或过低，增益绝对值都会下降。截止频率为0.707增益，高频区为上限截止频率，低频区为下限截止频率。两个截止频率之间为通频带。（记图像） 失真：相位失真（各波形相位不同，则叠加波形会错位，），频率失真（两个频率不同的波形叠加放大，因为频率不同，所以两个波形增益不一样，那放大后波形就会失真） 关于相位失真，好奇这个相位怎么样才能移位呢？？？ 非线性失真系数（THD）：放大器本身是非线性器件晶体管组成，所以，本身输出会产生非线性失真。有个非线性失真系数，不写了。 放大器的输出动态范围：就是避免放大器的非线性失真，不失真的电压有个范围，最大值叫做放大器的输出动态范围。 放大器传输特性：随着输入电压的变化，输出电压线性变化叫做线性输入范围，非线性临界点叫做非线性限幅。","link":"/2020/02/17/ch1-2%20%E6%94%BE%E5%A4%A7%E5%99%A8%E4%B8%BB%E8%A6%81%E6%8C%87%E6%A0%87/"},{"title":"ch2-2 同相以及反相比例放大器","text":"同相比例放大器 根据理想运放传输特性，当增益Auo很大时，需要保证运放差模输入电压趋近于0，同相端输入，反相端要进行一个负反馈，使得反相端输入电压随同相端输入电压保持动态平衡，满足运放差模输入电压趋近于0。 那么为了保证运放差模输入电压趋近于0，同相端电压和反相端电压要相等（虚短路），反相端电压又等于输出端电压的分压（没有图，公式记在脑子里）带入闭环增益（输出电压比上输入的运放差模输入电压），约掉输出电压得到：$$A=\\cfrac{Uo}{Ui}=1+\\cfrac{R2}{R1}$$注意这里R2是反馈网络的负载，R1是反相输入端口的负载，要注意是，这里反相输入端口也是接地了的。(图记在脑子里啊 ) 反相比例放大器 和上面相似，同相端接地，反相端输入端。不同的是反馈端接到反相输入端，因为同相端接地，为0，反相端增加，输出电压减小，反馈给反相端口，就趋近于0.(那么这里反相输入端就可以近似看做是地，叫做虚地) 这里上课讲一个分压比，得到反相输入端的电压和运放差模输入电压以及输出电压的关系(这里不理解？？) 由所推出来的式子得到$$Uo=-\\cfrac{R2}{R1}Ui$$$$A = \\cfrac{Uo}{Ui} = -\\cfrac{R2}{R1}$$ 反相比例放大器的输入电阻 同相比例放大器的输入电阻是无穷大,反相比例放大器不是这个情况。需要考虑R2（反馈网络上的负载）对输入端的影响，通过密勒原理（不明白，感觉是电路欠下的债？？）在输入端等效出密勒等效电阻，得出密勒等效电阻趋于0（Auo在分母，趋于无穷大，结果趋于0），得出输入电阻趋于R1. 补充共模输入：大小和相位基本相同，叫做共模信号 虚短路：$Ui+ = Ui-\\not={0}$ 虚断路：$Ui+ = Ui-=0$ 2020.2.18","link":"/2020/02/18/ch2-2%20%E5%90%8C%E7%9B%B8%E4%BB%A5%E5%8F%8A%E5%8F%8D%E7%9B%B8%E6%AF%94%E4%BE%8B%E6%94%BE%E5%A4%A7%E5%99%A8/"},{"title":"ch1-1 导论","text":"toc:true为什么学？模电： 发展-&gt;高频/数电/微电子/电力电子 可直接解决工程问题：（温度……——&gt;传感器——&gt;电信号） / 数字信号——&gt;模拟电路——&gt;模拟信号 时间和幅度连续变化 学什么？电子器件 电阻：耗能元件 / 电容：储能元件（有损耗） /电感 变压器 / 受控源 /非线性器件……物理非线性器件的探索： 1904年–伦敦大学–弗莱明–发明电子管（电流电压非线性/有结构脆弱等缺点） 1947年–贝尔实验室–威廉，肖克利等三位科学家发明–晶体三极管（半导体器件） 1952年–英国皇家雷达研究所–提出”集成电路”概念 1958年–美国德州仪器公司–Jack S.Kilby–发明第一片集成电路 现代–系统集成（SOC）–&gt;集成度高课程 器件：晶体管，场效应管 放大器：顾名思义，放大小信号 且不失真 滤波器：给输入信号去除噪声 振荡器：上电即可发出脉冲（如三角波，方波，正弦波……如555振荡器） 电源：输入交流——&gt;输出稳定直流电模电难点&amp;解决方案 敏感性：器件非线性，RC数值，温度，频率（这里的频率指的是什么频率？只是输入信号吗？），噪声/干扰，电源电压…… 解决方案：1.提高器件性能 2.引入负反馈 针对负反馈，这里咱多写两句，这里和何凯明同学提出的残差网络（Resnet）很相似（其实何凯明同学也是借鉴了电路中的负反馈）只是神经网络中，他是将输出通过负反馈与前者相比较，取loss的优质带入下一层网络，而这里是将放大器倍数增大，增益只取决于F（反馈）这很有意思，但还有一些不太明白：这里F有些抽象，不明白这是怎么工作的，是什么器件来反馈 ? 重要思想……（贯彻全书？）$\\cfrac{A}{1+AF}$ $\\thickapprox$ $\\cfrac{1}{F}$ 相减和高倍放大器集成==&gt;运算放大器（operational Amplifier） 所以：运放+反馈 = …………电路 2020.2.17","link":"/2020/02/17/ch1-1%20%E5%AF%BC%E8%AE%BA/"},{"title":"hexo 操作注意","text":"前言本文针对自己使用hexo中遇到的问题进行总结 1 instal安装超时，ERROR这个用国内的淘宝镜像源进行安装，在安装过cnpm基础之上，每次将命令中的npm修改成cnpm即可。 2 hexo d ERRORhexo d命令报错 ERROR Deployer not found：git这个是因为没有安装hexo-deployer-git插件，安装即可，命令如下： 1npm install hexo-deployer-git --save 3 hexo 常用指令hexo g ：generate 重新生成改动文件hexo clean ：清除缓存文件和已经生成的静态文件（在更换主题时需要）hexo s：server （也可以理解start）启动本地服务器hexo d：deploy 部署网站（上传远程仓库） 4 hexo d ERROR Timeout上传失败，发现是网络问题，发现如果科学上网的话是没有出现过ERROR Timeout的情况","link":"/2020/02/15/hexo%20%E6%93%8D%E4%BD%9C%E6%B3%A8%E6%84%8F/"},{"title":"ch2-3 相加器","text":"由运放构成的相加器传统电阻分压 缺点：1. 信号会衰减，无法放大；2. 加上负载的话，分压系数会变化；3. 两端初始的信号源也会互相干扰（可能有电场等相互干扰吧）————&gt;加上运算放大器解决问题 同相加法器 运放输入电阻趋近于无穷大，输出电阻趋近于0，起到隔离放大的作用（这里的隔离是指的隔离什么呢？？是输入信号的噪声吗？？？） 首先这里是在同相比例放大器的基础上，在输入端加入两个分开的电源以及负载（这里也要记住在脑子里），负载分别是R1和R2，输入电压为U+$$U+=\\cfrac{R2}{R1+R2}Ui1+\\cfrac{R1}{R1+R2}Ui2$$这个公式怎么推导的，这里要记住，对Ui1和Ui2分开考虑，当对Ui1考虑时，就把Ui2接地，当对Ui2考虑时就把Ui1接地，分别求出Ui1和Ui2对U+的影响，然后叠加起来即为U+处的电压$$Uo = (1+\\cfrac{Rf}{R})U+$$$$Uo = (1+\\cfrac{Rf}{R})(\\cfrac{R2}{R1+R2}Ui1+\\cfrac{R1}{R1+R2}Ui2)$$若R1 = R2$$Uo = \\cfrac{1}{2}(1+\\cfrac{Rf}{R})(Ui1 + Ui2)$$缺点：两信号源之间依然会互相影响（接在一起肯定会互相影响） 反相相加器 这里是在反相比例放大器的基础上，将反相输入端接上分别的信号源以及负载(图请记在脑子里，请记得反相输入端是虚地) 根据叠加原理，可得：$$Uo = -(\\cfrac{Rf}{R1}Ui1+\\cfrac{Rf}{R2}Ui2+\\cfrac{Rf}{R3}Ui3)$$当R1 = R2 = R3 时$$Uo = -\\cfrac{Rf}{R}(Ui1+Ui2+Ui3)$$优点：因为反相端虚地，各电流值由该支路信号源和电阻独立决定，各个信号源之间就不会影响。(这里我就奇怪了，不管是虚地还是啥的，两个连接上的信号源对这个节点就没有影响了？？？) 反相加法器的设计(记牢反相比例，同相比例放大器的闭环增益公式很重要)$$Auf = -\\cfrac{Rf}{R}$$ 实现：Uo = -6( Ui1 + Ui2 )———要求闭环输入电阻Rif大于等于30k 注：脑子里算算就行了 实现：Uo = - 5Ui1 - 8Ui2 - 3*Ui3 由于反馈网络负载是固定的，所以先确定Rf，剩下各自算算就行，脑子里过一下 同相加法器的设计(记牢反相比例，同相比例放大器的闭环增益公式很重要)$$Auf = (1 + \\cfrac{Rf}{R})$$对于同相加法器，对信号的放大倍数还取决于R1 ，R2$$Uo = (1+\\cfrac{Rf}{R})(\\cfrac{R2}{R1+R2}Ui1+\\cfrac{R1}{R1+R2}Ui2)$$ 实现：Uo = 9(Ui1 + Ui2) 对两个信号放大倍数相同，有公式可知，由于增益不变，放大倍数也不变，所以R1 = R2$$Uo = \\cfrac{1}{2}(1+\\cfrac{Rf}{R})(Ui1 + Ui2)$$剩下参数自己设一下都行 实现：Uo = 2 Ui1 + 5 Ui2同相加法器，增益不变嘛，所以放大倍数由R1 ，R2（信号源上的负载决定），所以 R1和R2求比值，剩下参数自己选择代入即可","link":"/2020/02/19/ch2-3%20%E7%9B%B8%E5%8A%A0%E5%99%A8/"},{"title":"ch2-4 相减器","text":"toc:true相减器目标：使输入的两个信号相减输出$$Uo = a Ui1 - b Ui2$$ 那么令同相端为被减数（Ui1），反相端为减数（Ui2），即可 $a = b + 1$ : 将Ui1和Ui2分别接地，可得到同相比例和反相比例放大器的 Uo，然后叠加原理，相加即是输出电压 推导一下： 令Ui2 接地,则为同相比例放大器$$Uo = (1 + \\cfrac{Rf}{R2})Ui1$$令Ui1接地，则为反相比例放大器$$Uo = -\\cfrac{Rf}{R2}Ui2$$用叠加定理合起来就是$$Uo = (1 + \\cfrac{Rf}{R2})Ui1 -\\cfrac{Rf}{R2}Ui2 $$ a &lt; b + 1 要减小a，减小同相输入端的电压（分压即可） 在U+处接上一个电阻，这个电阻接地即可$$Uo = (1 + \\cfrac{Rf}{R2})(\\cfrac{R4}{R1+R4})Ui1 -\\cfrac{Rf}{R2}Ui2 $$ a &gt; b + 1 同理增加a，减小Ui2的放大倍数就可以了，Rf不变，增加分母上的值即可，即，在R2上面并联一个电阻即可$$Uo = (1+\\cfrac{Rf}{R2+R})Ui1-\\cfrac{Rf}{R2}Ui2$$由于虚断的原因，在反相比例放大器的情况下，R两端电压都是0，所以R不起作用 a = b = k 常用的模型是使R2 = R1，Rf = R3 ，就可以满足 a = b = k 则：$$Uo = \\cfrac{R3}{R2}(Ui1-Ui2) = \\cfrac{Rf}{R2}(Ui1-Ui2)$$ 相减器设计实例 实现：Uo = 5 ( Ui1 - Ui2 ) 放大倍数相同，说明Rf = R4，R1 = R2，…… 实现：Uo = 5 Ui1 - 8 Ui2 写出 a &lt; b 的情况（公式） 实现：Uo = 8 Ui1 - 5 Ui2","link":"/2020/02/19/ch2-4%20%E7%9B%B8%E5%87%8F%E5%99%A8/"},{"title":"Git远程管理Github仓库&遇到的问题","text":"toc:true 前言一直在网络上看到很多从业好多年的后端开发人员推荐使用Git来进行代码的管理，这次在学习中简单总结一下。 git上传代码流程 $ git clone将github上download处的https地址复制，在电脑本地创建git.文件夹。 $ git add.将本地文件保存到暂存区 $ git commit -m文件提交到本地仓库 $ git push将文件上传到远程仓库 $ git pull拉取/同步远程仓库的代码到本地，每次开始开发和提交前都要记得pull一下，以免提交发生冲突。git上传遇到的问题1.The remote end hung up unexpectedly这个挺头疼的，在Stack Overflow上面找了几种方法，有人说的网络的问题，有人说是暂缓区不足，有人说是网络的问题，也有说关掉防火墙和杀毒软件会OK，还去调节参数。。。因为时间的原因，我暂时还没有试过每一种方法，目前尝试的几种方法是不成功的。git push完后会等待很长时间然后报错，/呜呜呜。。","link":"/2020/02/16/Git%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86Github%E4%BB%93%E5%BA%93&%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"},{"title":"icarus 美化主题的坑","text":"前言很羡慕别人做的很精美，简约大方的博客，所以自己也开始捣鼓，在Google和百度上找方法，但有些方法在自己这里不成功，下面我自己总结一下这些坑。 1.鼠标点击爱心效果看了几篇文章，都说是在/themes/icarus/sourse/js/src中添加click.js文件，然后复制代码，实际上没有最后的src文件，在/themes/icarus/sourse/js里添加即可。","link":"/2020/02/15/icarus%20%E7%BE%8E%E5%8C%96%E4%B8%BB%E9%A2%98%E7%9A%84%E5%9D%91/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/02/13/hello-world/"}],"tags":[],"categories":[]}